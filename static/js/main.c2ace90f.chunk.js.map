{"version":3,"sources":["components/Layout/Button/Button.js","assets/music_icon.svg","components/Homepage/HeroSection/HeroSection.js","components/Homepage/HomePage.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","props","className","children","HeroSection","to","src","musicLogo","alt","HomePage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"onBAWeA,MARCC,GAER,wBAAQC,UAAU,uCAAlB,SACI,iCAAOD,EAAME,SAAS,mBAAGD,UAAU,mCCNhC,MAA0B,uCCM1B,SAASE,IACvB,OACC,cAAC,WAAD,UACC,qBAAKF,UAAU,iBAAf,SACC,qBAAKA,UAAU,WAAf,SACC,sBAAKA,UAAU,sCAAf,UAEC,qBAAKA,UAAU,aAAf,SACC,sBAAMA,UAAU,aAAhB,SACC,qBAAKA,UAAU,6BAAf,SACC,qBAAKA,UAAU,qBAAf,2EAMH,sBAAKA,UAAU,cAAf,UACC,2CACA,mBAAGA,UAAU,OAAb,gNAKA,qBAAKA,UAAU,WAAf,SACC,qBAAKA,UAAU,4BAAf,SACC,sBAAKA,UAAU,MAAf,UACC,qBAAKA,UAAU,mCAAf,SACC,cAAC,IAAD,CAAMG,GAAI,WAAV,SACC,cAAC,EAAD,0BAGF,qBAAKH,UAAU,2CAAf,SACC,cAAC,IAAD,CAAMG,GAAI,UAAV,SACC,cAAC,EAAD,mCASN,sBAAKH,UAAU,aAAf,UACC,sBAAMA,UAAU,kBAAhB,SACC,qBAAKA,UAAU,MAAf,SACC,qBAAKA,UAAU,YAAf,oDAGF,qBAAKI,IAAKC,EAAWC,IAAI,kBAI1B,sBAAKN,UAAU,WAAf,UACC,8OAIA,kXC5DQ,SAASO,IACvB,OACC,cAAC,WAAD,UACC,cAACL,EAAD,MCWYM,MAXf,WACC,OACC,cAAC,IAAD,UACC,eAAC,IAAD,WACC,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,cAAC,IAAD,CAAUJ,GAAG,YCCGS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,kB","file":"static/js/main.c2ace90f.chunk.js","sourcesContent":["import React from 'react';\nimport \"./button.css\";\n\nconst Button = (props) => {\n    return (\n        <button className=\"btn btn-primary shadow-sm submit-btn\">\n            <span>{props.children}<i className=\"fas fa-angle-double-right\"></i></span>\n        </button>\n    )\n}\n\nexport default Button;","export default __webpack_public_path__ + \"static/media/music_icon.b3d780cd.svg\";","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./heroSection.css\";\nimport Button from \"../../Layout/Button/Button\";\nimport musicLogo from \"../../../assets/music_icon.svg\";\n\nexport default function HeroSection() {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"hero-container\">\n\t\t\t\t<div className=\"hero-box\">\n\t\t\t\t\t<div className=\"row justify-content-center hero-row\">\n\t\t\t\t\t\t{/* INTRO CARD */}\n\t\t\t\t\t\t<div className=\"intro-card\">\n\t\t\t\t\t\t\t<span className=\"intro-text\">\n\t\t\t\t\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t\t\t\t\t<div className=\"col-lg-5 col-md-10\">Become a part of Digital Music and Collectibles history</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* INTRO TO THE BRAND */}\n\t\t\t\t\t\t<div className=\"brand-intro\">\n\t\t\t\t\t\t\t<h2>Musomatic</h2>\n\t\t\t\t\t\t\t<p className=\"mt-3\">\n\t\t\t\t\t\t\t\tWe aim to uplift musicians by enabling them to creating NFTs of their music and providing them with royalties and recognition that they deserve but are not able to get\n\t\t\t\t\t\t\t\tenough from other sources.\n\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t<div className=\"row mt-5\">\n\t\t\t\t\t\t\t\t<div className=\"col-lg-8 col-md-10 col-12\">\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"col-lg-4 col-md-5 col-sm-5 col-6\">\n\t\t\t\t\t\t\t\t\t\t\t<Link to={\"/library\"}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button>Library</Button>\n\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"col-lg-4 col-md-5 col-sm-5 col-6 ml-sm-1\">\n\t\t\t\t\t\t\t\t\t\t\t<Link to={\"/create\"}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button>Create</Button>\n\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Music Card Component */}\n\t\t\t\t\t\t<div className=\"music-card\">\n\t\t\t\t\t\t\t<span className=\"music-card-text\">\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"col-lg-10\">New Generation of Music Collection</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<img src={musicLogo} alt=\"music icon\" />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* ABOUT Musomatic */}\n\t\t\t\t\t\t<div className=\"about-us\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tMusomatic is a decentralized application(dApp) for musicians to create NFTs of their music. These NFTs can then be traded and each time an NFT gets traded, the musician\n\t\t\t\t\t\t\t\twill get 5% of the trade as royalty!\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tIt is a platform to trade individual NFTs of songs. NFTs from artists can be looked at as stocks in the market. Just as buying stocks of companies that people believe\n\t\t\t\t\t\t\t\tto perform good in the future can result in massive profits, similarly, the value of these NFTs can skyrocket if that artist grows to be successful over time.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n}\n","import React, { Fragment } from \"react\";\nimport HeroSection from \"./HeroSection/HeroSection.js\";\n\nexport default function HomePage() {\n\treturn (\n\t\t<Fragment>\n\t\t\t<HeroSection />\n\t\t</Fragment>\n\t);\n}\n","import React, { useState, useEffect } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport HomePage from \"./Homepage/HomePage\";\n\nfunction App() {\n\treturn (\n\t\t<HashRouter>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={HomePage} />\n\t\t\t\t<Redirect to=\"/\" />\n\t\t\t</Switch>\n\t\t</HashRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}